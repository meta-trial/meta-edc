# Generated by Django 4.2.11 on 2024-03-27 19:41

import django.core.validators
from django.db import migrations
import django_crypto_fields.fields.encrypted_char_field
import edc_consent.validators


class Migration(migrations.Migration):

    dependencies = [
        ("meta_consent", "0024_historicalsubjectconsentv1"),
    ]

    operations = [
        migrations.AlterField(
            model_name="historicalsubjectconsent",
            name="first_name",
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                blank=True,
                help_text="Use UPPERCASE letters only. (Encryption: RSA local)",
                max_length=71,
                null=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message="Ensure name consist of letters only in upper case",
                        regex="^([A-Z]+$|[A-Z]+\\ [A-Z]+)$",
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name="historicalsubjectconsent",
            name="guardian_name",
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                blank=True,
                help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)",
                max_length=71,
                null=True,
                validators=[edc_consent.validators.FullNameValidator()],
                verbose_name="Guardian's last and first name",
            ),
        ),
        migrations.AlterField(
            model_name="historicalsubjectconsent",
            name="last_name",
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                blank=True,
                help_text="Use UPPERCASE letters only. (Encryption: RSA local)",
                max_length=71,
                null=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message="Ensure name consist of letters only in upper case",
                        regex="^([A-Z]+$|[A-Z]+\\ [A-Z]+)$",
                    )
                ],
                verbose_name="Surname",
            ),
        ),
        migrations.AlterField(
            model_name="historicalsubjectconsentv1",
            name="first_name",
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                blank=True,
                help_text="Use UPPERCASE letters only. (Encryption: RSA local)",
                max_length=71,
                null=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message="Ensure name consist of letters only in upper case",
                        regex="^([A-Z]+$|[A-Z]+\\ [A-Z]+)$",
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name="historicalsubjectconsentv1",
            name="guardian_name",
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                blank=True,
                help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)",
                max_length=71,
                null=True,
                validators=[edc_consent.validators.FullNameValidator()],
                verbose_name="Guardian's last and first name",
            ),
        ),
        migrations.AlterField(
            model_name="historicalsubjectconsentv1",
            name="last_name",
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                blank=True,
                help_text="Use UPPERCASE letters only. (Encryption: RSA local)",
                max_length=71,
                null=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message="Ensure name consist of letters only in upper case",
                        regex="^([A-Z]+$|[A-Z]+\\ [A-Z]+)$",
                    )
                ],
                verbose_name="Surname",
            ),
        ),
        migrations.AlterField(
            model_name="subjectconsent",
            name="first_name",
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                blank=True,
                help_text="Use UPPERCASE letters only. (Encryption: RSA local)",
                max_length=71,
                null=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message="Ensure name consist of letters only in upper case",
                        regex="^([A-Z]+$|[A-Z]+\\ [A-Z]+)$",
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name="subjectconsent",
            name="guardian_name",
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                blank=True,
                help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)",
                max_length=71,
                null=True,
                validators=[edc_consent.validators.FullNameValidator()],
                verbose_name="Guardian's last and first name",
            ),
        ),
        migrations.AlterField(
            model_name="subjectconsent",
            name="last_name",
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                blank=True,
                help_text="Use UPPERCASE letters only. (Encryption: RSA local)",
                max_length=71,
                null=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message="Ensure name consist of letters only in upper case",
                        regex="^([A-Z]+$|[A-Z]+\\ [A-Z]+)$",
                    )
                ],
                verbose_name="Surname",
            ),
        ),
    ]
