# Generated by Django 3.2.4 on 2021-08-08 21:55

import uuid

import _socket
import django.contrib.sites.managers
import django.core.validators
import django.db.models.deletion
import django_audit_fields.fields.hostname_modification_field
import django_audit_fields.fields.userfield
import django_audit_fields.fields.uuid_auto_field
import django_audit_fields.models.audit_model_mixin
import django_revision.revision_field
import edc_model.validators.date
import edc_protocol.validators
import edc_utils.date
import edc_visit_tracking.managers
import edc_vitals.models.fields.blood_pressure
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("edc_action_item", "0028_auto_20210203_0706"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("sites", "0002_alter_domain_unique"),
        ("meta_subject", "0072_auto_20210805_1545"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="historicalpatienthistory",
            name="additional_conditions",
        ),
        migrations.RemoveField(
            model_name="patienthistory",
            name="additional_conditions",
        ),
        migrations.AddField(
            model_name="followupvitals",
            name="dia_blood_pressure_avg",
            field=models.IntegerField(
                blank=True,
                null=True,
                verbose_name="Blood pressure: diastolic (average)",
            ),
        ),
        migrations.AddField(
            model_name="followupvitals",
            name="dia_blood_pressure_one",
            field=edc_vitals.models.fields.blood_pressure.DiastolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AddField(
            model_name="followupvitals",
            name="dia_blood_pressure_two",
            field=edc_vitals.models.fields.blood_pressure.DiastolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AddField(
            model_name="followupvitals",
            name="severe_htn",
            field=models.CharField(
                blank=True,
                choices=[("Yes", "Yes"), ("No", "No")],
                help_text="Based on the above readings. Severe HTN is any BP reading > 180/120mmHg",
                max_length=15,
                null=True,
                verbose_name="Does the patient have severe hypertension?",
            ),
        ),
        migrations.AddField(
            model_name="followupvitals",
            name="sys_blood_pressure_avg",
            field=models.IntegerField(
                blank=True, null=True, verbose_name="Blood pressure: systolic (average)"
            ),
        ),
        migrations.AddField(
            model_name="followupvitals",
            name="sys_blood_pressure_one",
            field=edc_vitals.models.fields.blood_pressure.SystolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AddField(
            model_name="followupvitals",
            name="sys_blood_pressure_two",
            field=edc_vitals.models.fields.blood_pressure.SystolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AddField(
            model_name="historicalfollowupvitals",
            name="dia_blood_pressure_avg",
            field=models.IntegerField(
                blank=True,
                null=True,
                verbose_name="Blood pressure: diastolic (average)",
            ),
        ),
        migrations.AddField(
            model_name="historicalfollowupvitals",
            name="dia_blood_pressure_one",
            field=edc_vitals.models.fields.blood_pressure.DiastolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AddField(
            model_name="historicalfollowupvitals",
            name="dia_blood_pressure_two",
            field=edc_vitals.models.fields.blood_pressure.DiastolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AddField(
            model_name="historicalfollowupvitals",
            name="severe_htn",
            field=models.CharField(
                blank=True,
                choices=[("Yes", "Yes"), ("No", "No")],
                help_text="Based on the above readings. Severe HTN is any BP reading > 180/120mmHg",
                max_length=15,
                null=True,
                verbose_name="Does the patient have severe hypertension?",
            ),
        ),
        migrations.AddField(
            model_name="historicalfollowupvitals",
            name="sys_blood_pressure_avg",
            field=models.IntegerField(
                blank=True, null=True, verbose_name="Blood pressure: systolic (average)"
            ),
        ),
        migrations.AddField(
            model_name="historicalfollowupvitals",
            name="sys_blood_pressure_one",
            field=edc_vitals.models.fields.blood_pressure.SystolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AddField(
            model_name="historicalfollowupvitals",
            name="sys_blood_pressure_two",
            field=edc_vitals.models.fields.blood_pressure.SystolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AddField(
            model_name="historicalmnsi",
            name="mnsi_not_performed_reason",
            field=models.TextField(
                blank=True,
                max_length=200,
                null=True,
                verbose_name="If NO, please provide a reason",
            ),
        ),
        migrations.AddField(
            model_name="historicalmnsi",
            name="mnsi_performed",
            field=models.CharField(
                choices=[("Yes", "Yes"), ("No", "No")],
                default="Yes",
                help_text="(`today` is relative to the report date/time above)",
                max_length=15,
                verbose_name="Is the MNSI assessment being performed today?",
            ),
        ),
        migrations.AddField(
            model_name="historicalpatienthistory",
            name="concomitant_conditions",
            field=models.TextField(
                blank=True,
                max_length=250,
                null=True,
                verbose_name="Does the patient have any other conditions not mentioned above?",
            ),
        ),
        migrations.AddField(
            model_name="historicalphysicalexam",
            name="dia_blood_pressure_avg",
            field=models.IntegerField(
                blank=True,
                null=True,
                verbose_name="Blood pressure: diastolic (average)",
            ),
        ),
        migrations.AddField(
            model_name="historicalphysicalexam",
            name="dia_blood_pressure_one",
            field=edc_vitals.models.fields.blood_pressure.DiastolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AddField(
            model_name="historicalphysicalexam",
            name="dia_blood_pressure_two",
            field=edc_vitals.models.fields.blood_pressure.DiastolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AddField(
            model_name="historicalphysicalexam",
            name="severe_htn",
            field=models.CharField(
                blank=True,
                choices=[("Yes", "Yes"), ("No", "No")],
                help_text="Based on the above readings. Severe HTN is any BP reading > 180/120mmHg",
                max_length=15,
                null=True,
                verbose_name="Does the patient have severe hypertension?",
            ),
        ),
        migrations.AddField(
            model_name="historicalphysicalexam",
            name="sys_blood_pressure_avg",
            field=models.IntegerField(
                blank=True, null=True, verbose_name="Blood pressure: systolic (average)"
            ),
        ),
        migrations.AddField(
            model_name="historicalphysicalexam",
            name="sys_blood_pressure_one",
            field=edc_vitals.models.fields.blood_pressure.SystolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AddField(
            model_name="historicalphysicalexam",
            name="sys_blood_pressure_two",
            field=edc_vitals.models.fields.blood_pressure.SystolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AddField(
            model_name="mnsi",
            name="mnsi_not_performed_reason",
            field=models.TextField(
                blank=True,
                max_length=200,
                null=True,
                verbose_name="If NO, please provide a reason",
            ),
        ),
        migrations.AddField(
            model_name="mnsi",
            name="mnsi_performed",
            field=models.CharField(
                choices=[("Yes", "Yes"), ("No", "No")],
                default="Yes",
                help_text="(`today` is relative to the report date/time above)",
                max_length=15,
                verbose_name="Is the MNSI assessment being performed today?",
            ),
        ),
        migrations.AddField(
            model_name="patienthistory",
            name="concomitant_conditions",
            field=models.TextField(
                blank=True,
                max_length=250,
                null=True,
                verbose_name="Does the patient have any other conditions not mentioned above?",
            ),
        ),
        migrations.AddField(
            model_name="physicalexam",
            name="dia_blood_pressure_avg",
            field=models.IntegerField(
                blank=True,
                null=True,
                verbose_name="Blood pressure: diastolic (average)",
            ),
        ),
        migrations.AddField(
            model_name="physicalexam",
            name="dia_blood_pressure_one",
            field=edc_vitals.models.fields.blood_pressure.DiastolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AddField(
            model_name="physicalexam",
            name="dia_blood_pressure_two",
            field=edc_vitals.models.fields.blood_pressure.DiastolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AddField(
            model_name="physicalexam",
            name="severe_htn",
            field=models.CharField(
                blank=True,
                choices=[("Yes", "Yes"), ("No", "No")],
                help_text="Based on the above readings. Severe HTN is any BP reading > 180/120mmHg",
                max_length=15,
                null=True,
                verbose_name="Does the patient have severe hypertension?",
            ),
        ),
        migrations.AddField(
            model_name="physicalexam",
            name="sys_blood_pressure_avg",
            field=models.IntegerField(
                blank=True, null=True, verbose_name="Blood pressure: systolic (average)"
            ),
        ),
        migrations.AddField(
            model_name="physicalexam",
            name="sys_blood_pressure_one",
            field=edc_vitals.models.fields.blood_pressure.SystolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AddField(
            model_name="physicalexam",
            name="sys_blood_pressure_two",
            field=edc_vitals.models.fields.blood_pressure.SystolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AlterField(
            model_name="followupvitals",
            name="dia_blood_pressure",
            field=edc_vitals.models.fields.blood_pressure.DiastolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AlterField(
            model_name="followupvitals",
            name="sys_blood_pressure",
            field=edc_vitals.models.fields.blood_pressure.SystolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AlterField(
            model_name="historicalfollowupvitals",
            name="dia_blood_pressure",
            field=edc_vitals.models.fields.blood_pressure.DiastolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AlterField(
            model_name="historicalfollowupvitals",
            name="sys_blood_pressure",
            field=edc_vitals.models.fields.blood_pressure.SystolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AlterField(
            model_name="historicalpatienthistory",
            name="concomitant_medications",
            field=models.TextField(
                blank=True,
                max_length=250,
                null=True,
                verbose_name="Is the patient taking any concomitant medications?",
            ),
        ),
        migrations.AlterField(
            model_name="historicalphysicalexam",
            name="dia_blood_pressure",
            field=edc_vitals.models.fields.blood_pressure.DiastolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AlterField(
            model_name="historicalphysicalexam",
            name="sys_blood_pressure",
            field=edc_vitals.models.fields.blood_pressure.SystolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AlterField(
            model_name="patienthistory",
            name="concomitant_medications",
            field=models.TextField(
                blank=True,
                max_length=250,
                null=True,
                verbose_name="Is the patient taking any concomitant medications?",
            ),
        ),
        migrations.AlterField(
            model_name="physicalexam",
            name="dia_blood_pressure",
            field=edc_vitals.models.fields.blood_pressure.DiastolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.AlterField(
            model_name="physicalexam",
            name="sys_blood_pressure",
            field=edc_vitals.models.fields.blood_pressure.SystolicPressureField(
                blank=True, null=True
            ),
        ),
        migrations.CreateModel(
            name="HistoricalBloodResultsIns",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True,
                        default=django_audit_fields.models.audit_model_mixin.utcnow,
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True,
                        default=django_audit_fields.models.audit_model_mixin.utcnow,
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                ("tracking_identifier", models.CharField(db_index=True, max_length=30)),
                ("action_identifier", models.CharField(db_index=True, max_length=50)),
                (
                    "parent_action_identifier",
                    models.CharField(
                        blank=True,
                        help_text="action identifier that links to parent reference model instance.",
                        max_length=30,
                        null=True,
                    ),
                ),
                (
                    "related_action_identifier",
                    models.CharField(
                        blank=True,
                        help_text="action identifier that links to related reference model instance.",
                        max_length=30,
                        null=True,
                    ),
                ),
                ("action_item_reason", models.TextField(editable=False, null=True)),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "fasting",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        null=True,
                        verbose_name="Has the participant fasted?",
                    ),
                ),
                (
                    "fasting_duration_str",
                    models.CharField(
                        blank=True,
                        help_text="Duration of fast. Format is `HHhMMm`. For example 1h23m, 12h7m, etc",
                        max_length=8,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^([0-9]{1,3}h([0-5]?[0-9]m)?)$",
                                message="Invalid format. Expected something like 1h20m, 11h5m, etc",
                            )
                        ],
                        verbose_name="How long have they fasted in hours and/or minutes?",
                    ),
                ),
                (
                    "fasting_duration_minutes",
                    models.IntegerField(help_text="system calculated value", null=True),
                ),
                (
                    "results_abnormal",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Are any of the above results abnormal?",
                    ),
                ),
                (
                    "results_reportable",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        help_text="If YES, this value will open Adverse Event Form.",
                        max_length=25,
                        verbose_name="If any results are abnormal, are results within grade 3 or above?",
                    ),
                ),
                ("summary", models.TextField(blank=True, null=True)),
                (
                    "ins_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        max_digits=8,
                        null=True,
                        verbose_name="Insulin",
                    ),
                ),
                (
                    "ins_quantifier",
                    models.CharField(
                        choices=[
                            ("=", "="),
                            (">", ">"),
                            (">=", ">="),
                            ("<", "<"),
                            ("<=", "<="),
                        ],
                        default="=",
                        max_length=10,
                    ),
                ),
                (
                    "ins_units",
                    models.CharField(
                        blank=True,
                        choices=[("IU/L", "IU/L"), ("U/L", "U/L")],
                        default="IU/L",
                        max_length=15,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "ins_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "ins_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("3", "Yes, grade 3"),
                            ("4", "Yes, grade 4"),
                            ("No", "Not reportable"),
                            ("Already reported", "Already reported"),
                            ("present_at_baseline", "Present at baseline"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "assay_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Result Report Date and Time",
                    ),
                ),
                (
                    "history_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "action_item",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edc_action_item.actionitem",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent_action_item",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edc_action_item.actionitem",
                    ),
                ),
                (
                    "related_action_item",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edc_action_item.actionitem",
                    ),
                ),
                (
                    "requisition",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Start typing the requisition identifier or select one from this visit",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="meta_subject.subjectrequisition",
                        verbose_name="Requisition",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
                (
                    "subject_visit",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="meta_subject.subjectvisit",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Blood Result: Insulin",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="BloodResultsIns",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True,
                        default=django_audit_fields.models.audit_model_mixin.utcnow,
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True,
                        default=django_audit_fields.models.audit_model_mixin.utcnow,
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("tracking_identifier", models.CharField(max_length=30, unique=True)),
                ("action_identifier", models.CharField(max_length=50, unique=True)),
                (
                    "parent_action_identifier",
                    models.CharField(
                        blank=True,
                        help_text="action identifier that links to parent reference model instance.",
                        max_length=30,
                        null=True,
                    ),
                ),
                (
                    "related_action_identifier",
                    models.CharField(
                        blank=True,
                        help_text="action identifier that links to related reference model instance.",
                        max_length=30,
                        null=True,
                    ),
                ),
                ("action_item_reason", models.TextField(editable=False, null=True)),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                        validators=[
                            edc_protocol.validators.datetime_not_before_study_start,
                            edc_model.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report Date",
                    ),
                ),
                (
                    "consent_model",
                    models.CharField(editable=False, max_length=50, null=True),
                ),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "fasting",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        null=True,
                        verbose_name="Has the participant fasted?",
                    ),
                ),
                (
                    "fasting_duration_str",
                    models.CharField(
                        blank=True,
                        help_text="Duration of fast. Format is `HHhMMm`. For example 1h23m, 12h7m, etc",
                        max_length=8,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^([0-9]{1,3}h([0-5]?[0-9]m)?)$",
                                message="Invalid format. Expected something like 1h20m, 11h5m, etc",
                            )
                        ],
                        verbose_name="How long have they fasted in hours and/or minutes?",
                    ),
                ),
                (
                    "fasting_duration_minutes",
                    models.IntegerField(help_text="system calculated value", null=True),
                ),
                (
                    "results_abnormal",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Are any of the above results abnormal?",
                    ),
                ),
                (
                    "results_reportable",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not applicable"),
                        ],
                        help_text="If YES, this value will open Adverse Event Form.",
                        max_length=25,
                        verbose_name="If any results are abnormal, are results within grade 3 or above?",
                    ),
                ),
                ("summary", models.TextField(blank=True, null=True)),
                (
                    "ins_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        max_digits=8,
                        null=True,
                        verbose_name="Insulin",
                    ),
                ),
                (
                    "ins_quantifier",
                    models.CharField(
                        choices=[
                            ("=", "="),
                            (">", ">"),
                            (">=", ">="),
                            ("<", "<"),
                            ("<=", "<="),
                        ],
                        default="=",
                        max_length=10,
                    ),
                ),
                (
                    "ins_units",
                    models.CharField(
                        blank=True,
                        choices=[("IU/L", "IU/L"), ("U/L", "U/L")],
                        default="IU/L",
                        max_length=15,
                        null=True,
                        verbose_name="units",
                    ),
                ),
                (
                    "ins_abnormal",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        null=True,
                        verbose_name="abnormal",
                    ),
                ),
                (
                    "ins_reportable",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N/A", "Not applicable"),
                            ("3", "Yes, grade 3"),
                            ("4", "Yes, grade 4"),
                            ("No", "Not reportable"),
                            ("Already reported", "Already reported"),
                            ("present_at_baseline", "Present at baseline"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="reportable",
                    ),
                ),
                (
                    "assay_datetime",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        validators=[edc_model.validators.date.datetime_not_future],
                        verbose_name="Result Report Date and Time",
                    ),
                ),
                (
                    "action_item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="edc_action_item.actionitem",
                    ),
                ),
                (
                    "parent_action_item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edc_action_item.actionitem",
                    ),
                ),
                (
                    "related_action_item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edc_action_item.actionitem",
                    ),
                ),
                (
                    "requisition",
                    models.ForeignKey(
                        blank=True,
                        help_text="Start typing the requisition identifier or select one from this visit",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="meta_subject.subjectrequisition",
                        verbose_name="Requisition",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
                (
                    "subject_visit",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="meta_subject.subjectvisit",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blood Result: Insulin",
                "verbose_name_plural": "Blood Results: Insulin",
                "ordering": ("-modified", "-created"),
                "get_latest_by": "modified",
                "abstract": False,
                "default_permissions": (
                    "add",
                    "change",
                    "delete",
                    "view",
                    "export",
                    "import",
                ),
            },
            managers=[
                ("on_site", django.contrib.sites.managers.CurrentSiteManager()),
                ("objects", edc_visit_tracking.managers.CrfModelManager()),
            ],
        ),
        migrations.AddIndex(
            model_name="bloodresultsins",
            index=models.Index(
                fields=["subject_visit", "site", "id"],
                name="meta_subjec_subject_b1df05_idx",
            ),
        ),
    ]
